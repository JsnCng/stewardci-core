// /*
// #########################
// #  SAP Steward-CI       #
// #########################
//
// THIS CODE IS GENERATED! DO NOT TOUCH!
//
// Copyright SAP SE.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SAP/stewardci-core/pkg/run (interfaces: RunManager)

// Package mock is a generated GoMock package.
package mock

import (
	k8s "github.com/SAP/stewardci-core/pkg/k8s"
	run "github.com/SAP/stewardci-core/pkg/run"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRunManager is a mock of RunManager interface
type MockRunManager struct {
	ctrl     *gomock.Controller
	recorder *MockRunManagerMockRecorder
}

// MockRunManagerMockRecorder is the mock recorder for MockRunManager
type MockRunManagerMockRecorder struct {
	mock *MockRunManager
}

// NewMockRunManager creates a new mock instance
func NewMockRunManager(ctrl *gomock.Controller) *MockRunManager {
	mock := &MockRunManager{ctrl: ctrl}
	mock.recorder = &MockRunManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunManager) EXPECT() *MockRunManagerMockRecorder {
	return m.recorder
}

// Cleanup mocks base method
func (m *MockRunManager) Cleanup(arg0 k8s.PipelineRun) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup
func (mr *MockRunManagerMockRecorder) Cleanup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockRunManager)(nil).Cleanup), arg0)
}

// GetRun mocks base method
func (m *MockRunManager) GetRun(arg0 k8s.PipelineRun) (run.Run, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRun", arg0)
	ret0, _ := ret[0].(run.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRun indicates an expected call of GetRun
func (mr *MockRunManagerMockRecorder) GetRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRun", reflect.TypeOf((*MockRunManager)(nil).GetRun), arg0)
}

// Start mocks base method
func (m *MockRunManager) Start(arg0 k8s.PipelineRun) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockRunManagerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRunManager)(nil).Start), arg0)
}
